>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test 1: Normal division
>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

# Test 2: Division with a float as the divisor
>>> matrix_divided([[1, 2], [3, 4]], 2.0)
[[0.5, 1.0], [1.5, 2.0]]

# Test 3: Raise an exception if the matrix is not a list of lists
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test 4: Raise an exception if the divisor is zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test 5: Raise an exception if the divisor is not a number
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test 6: Raise an exception if the matrix rows are not of the same size
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test 7: Raise an exception if the matrix contains non-numeric elements
>>> matrix_divided([[1, 2], [3, "4"]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test 8: Division with an empty matrix
>>> matrix_divided([], 2)
[]

# Test 9: Division with empty sublists
>>> matrix_divided([[], []], 2)
[[], []]
